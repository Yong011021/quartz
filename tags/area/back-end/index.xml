<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>area/back-end on</title><link>https://yong011021.github.io/quartz/tags/area/back-end/</link><description>Recent content in area/back-end on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yong011021.github.io/quartz/tags/area/back-end/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yong011021.github.io/quartz/notes/RabbitMQ-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yong011021.github.io/quartz/notes/RabbitMQ-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid><description>[!tip] 鉴于 AMPQ 实现的多样性，笔记会偏向于描述概念与原理，功能的实现可以参考官方文档或者项目代码。
RabbitMQ 是用于程序之间传递消息的一种软件（专业点来说就是一种中间件）。
工作原理：
flowchart LR Producer -- Connection1 subgraph Connection1 direction LR Channel1 Channel2 end Connection1 -- RabbitMQ subgraph RabbitMQ direction LR Exchange1 -- Queue1 Exchange1 -- Queue2 Exchange2 -- Queue2 Exchange2 -- Queue3 end subgraph Connection2 direction LR Channel3 Channel4 end Connection2 -- RabbitMQ Consumer -- Connection2 安装与部署 ubuntu 环境下使用 apt-get 命令安装 erlang 和 rabbitmq-server 程序的运行依赖 Erlang，所以需要同时安装 Erlang rabbitmq-server 是服务 开启 rabbitmq_management 插件启用 web 管理页面 默认只有一个 guest 用户，且只能本地登陆 rabbitmqctl 可以进行访问管理 基本概念 Producer：生产消息 Consumer：消费消息 [[#交换机 |Exchange]]：分发消息 Queue：存放消息 工作队列 工作队列指一个 Queue 的所有消费者组成的队列，消费者们会竞争 Queue 中的消息。</description></item></channel></rss>